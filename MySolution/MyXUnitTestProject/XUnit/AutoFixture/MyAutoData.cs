using AutoFixture;

namespace MyXUnitTestProject
{
    public class MyAutoData
    {
        /// <summary>
        /// injects and auto-generates values for the constructor
        /// </summary>
        [Theory, AutoData]
        public void MyAutoDataTheory_Generate_Inject(MyData myclass)
        {
            myclass.Should().NotBeNull();
            myclass.Data.Should().NotBeNullOrWhiteSpace();
        }
        /// <summary>
        /// injects data class
        /// </summary>
        [Theory, AutoData]
        public void MyAutoDataTheory_Inject(MyDataClassA myData)
        {
            myData.Should().NotBeNull();
            myData.AsEnumerable().Should()
                .ContainEquivalentOf(new object[] { 1, "1A" }).And
                .ContainEquivalentOf(new object[] { 2, "2A" });
        }

        /// <summary>
        /// allows to assing values the same way as <see cref="InlineDataAttribute"/>
        /// values not defined are generated by AutoFixture
        /// </summary>
        [Theory, InlineAutoData(1, "2", 3.0)]
        public void MyInlineAutoDataTheory(int id, string data, double value,
            string generatedValue, MyDataClassA myclass)
        {
            id.Should().Be(1);
            data.Should().Be("2");
            value.Should().Be(3.0);
            generatedValue.Should().NotBeNullOrWhiteSpace();

            myclass.Should().NotBeNull();
            myclass.AsEnumerable().Should()
                .ContainEquivalentOf(new object[] { 1, "1A" }).And
                .ContainEquivalentOf(new object[] { 2, "2A" });
        }
    }
}
